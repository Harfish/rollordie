{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Roll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","detectResult","state","total","setState","totalStyle","isDisabled","result","game","onRoll","roll","Math","floor","random","resetGame","styles","theme","root","flexGrow","paper","padding","spacing","unit","textAlign","color","palette","text","secondary","bind","assertThisInitialized","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","Grid_default","container","direction","justify","alignItems","item","Paper_default","className","Button_default","type","onClick","disabled","style","Component","App","App_Roll","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.413cfcff.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper'\n\nconst App = () => <Roll />;\n\nclass Roll extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      total: 0,\n      roll: '-',\n      isDisabled: false,\n      totalStyle: 'ok',\n      result: '',\n      game: ''\n    };\n    this.onRoll=this.onRoll.bind(this)\n   }\n  \n  detectResult = () => {\n    if (this.state.total > 15 && this.state.total < 20) {\n      this.setState((state) => ({\n          totalStyle: 'danger'\n      }))\n    } else if (this.state.total > 20) {\n      this.setState((state) => ({\n        isDisabled: true,\n        totalStyle: 'bust',\n        result: 'lose',\n        game: 'over'\n    }))\n    } else if (this.state.total === 20) {\n      this.setState((state) => ({\n        isDisabled: true,\n        totalStyle: 'win',\n        result: 'win',\n        game: 'over'\n    }))\n    }\n    \n  }\n   \n  onRoll = () => {\n    this.setState({ roll:  Math.floor(Math.random() * 6) + 1});\n    this.setState((state) => ({\n      total: state.total + state.roll\n    }),() => {this.detectResult()}\n    )\n  };\n  \n  resetGame = () => {\n    this.setState((state) => ({\n      total: 0,\n      roll: '-',\n      isDisabled: false,\n      totalStyle: 'ok',\n      result: '',\n      game: ''\n    }))\n  }\n\n  styles = theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing.unit * 2,\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  });\n  \n  render() {\n    return (\n      <div>\n        <AppBar position=\"static\" color=\"secondary\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Roll Or Die\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        >\n          <Grid item>\n            <Paper>\n              <p>Roll: {this.state.roll} </p>\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        >\n          <Grid item>\n            <Paper className=\"rounded\">\n              <Button type=\"button\" onClick={this.onRoll} disabled={this.state.isDisabled} variant=\"contained\" color=\"primary\">\n                Roll\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        >\n          <Grid item>\n            <Paper>\n              <p className={this.state.totalStyle}>Total: {this.state.total}</p>\n            </Paper>\n          </Grid>\n        </Grid>\n        { this.state.game === 'over' &&\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        >\n          <Grid item>\n            <Paper className=\"rounded\" style={{textAlign: 'center'}}>\n            <h2><p>You {this.state.result}!</p></h2>\n              <Button type=\"button\" onClick={this.resetGame} variant=\"contained\" color=\"secondary\">\n                Reset\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n        }\n      </div>\n      );\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}