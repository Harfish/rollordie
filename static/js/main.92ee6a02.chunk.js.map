{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Roll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","detectResult","state","total","setState","totalStyle","isDisabled","result","game","onRoll","animate","delay","Math","floor","random","setTimeout","roll","resetGame","styles","theme","root","flexGrow","paper","padding","spacing","unit","textAlign","color","palette","text","secondary","bind","assertThisInitialized","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","Grid_default","container","direction","justify","alignItems","item","Paper_default","style","src","process","alt","className","Button_default","type","onClick","disabled","Component","App","App_Roll","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAWMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcRQ,aAAe,WACTP,EAAKQ,MAAMC,MAAQ,IAAMT,EAAKQ,MAAMC,MAAQ,GAC9CT,EAAKU,SAAS,SAACF,GAAD,MAAY,CACtBG,WAAY,YAEPX,EAAKQ,MAAMC,MAAQ,GAC5BT,EAAKU,SAAS,SAACF,GAAD,MAAY,CACxBI,YAAY,EACZD,WAAY,OACZE,OAAQ,OACRC,KAAM,UAEsB,KAArBd,EAAKQ,MAAMC,OACpBT,EAAKU,SAAS,SAACF,GAAD,MAAY,CACxBI,YAAY,EACZD,WAAY,MACZE,OAAQ,MACRC,KAAM,WAhCOd,EAsCnBe,OAAS,WACPf,EAAKU,SAAS,SAACF,GAAD,MAAY,CACxBQ,QAAS,cACTJ,YAAY,KAEd,IAAIK,EAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAC9CC,WAAW,WACTrB,EAAKU,SAAS,CAAEY,KAAOJ,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IACvDpB,EAAKU,SAAS,SAACF,GAAD,MAAY,CACxBQ,QAAS,OACTJ,YAAY,EACZH,MAAOD,EAAMC,MAAQD,EAAMc,OAC5B,WAAOtB,EAAKO,kBAEdU,IApDgBjB,EAwDnBuB,UAAY,WACVvB,EAAKU,SAAS,SAACF,GAAD,MAAY,CACxBC,MAAO,EACPa,KAAM,IACNV,YAAY,EACZD,WAAY,KACZE,OAAQ,GACRC,KAAM,GACNE,QAAS,WAhEMhB,EAoEnBwB,OAAS,SAAAC,GAAK,MAAK,CACjBC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAA8B,EAArBJ,EAAMK,QAAQC,KACvBC,UAAW,SACXC,MAAOR,EAAMS,QAAQC,KAAKC,aAxE5BpC,EAAKQ,MAAQ,CACXC,MAAO,EACPa,KAAM,IACNV,YAAY,EACZD,WAAY,KACZE,OAAQ,GACRC,KAAM,GACNE,QAAS,QAEXhB,EAAKe,OAAOf,EAAKe,OAAOsB,KAAZpC,OAAAqC,EAAA,EAAArC,CAAAD,IAZKA,wEAgFjB,OACEuC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,SAASV,MAAM,aAC9BM,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,QAAQ,KAAKb,MAAM,WAA/B,iBAKJM,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACAQ,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAETZ,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMY,MAAI,GACRb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAOc,MAAO,CAAEtB,UAAW,WACzBO,EAAAC,EAAAC,cAAA,4FACAF,EAAAC,EAAAC,cAAA,OAAKc,IAAKC,qBAAuCrD,KAAKK,MAAMc,KAAO,OAAQmC,IAAI,OAAOC,UAAWvD,KAAKK,MAAMQ,aAIlHuB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACAQ,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAETZ,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMY,MAAI,GACRb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAOkB,UAAU,WACfnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAQoB,KAAK,SAASC,QAAS1D,KAAKY,OAAQ+C,SAAU3D,KAAKK,MAAMI,WAAYkC,QAAQ,YAAYb,MAAM,WAAvG,WAMNM,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACAQ,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAETZ,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMY,MAAI,GACRb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,KACED,EAAAC,EAAAC,cAAA,KAAGiB,UAAWvD,KAAKK,MAAMG,YAAzB,UAA6CR,KAAKK,MAAMC,UAIxC,SAApBN,KAAKK,MAAMM,MACbyB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACAQ,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAETZ,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAMY,MAAI,GACRb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAOkB,UAAU,UAAUJ,MAAO,CAACtB,UAAW,WAC9CO,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,gBAAQtC,KAAKK,MAAMK,OAAnB,MACF0B,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAQoB,KAAK,SAASC,QAAS1D,KAAKoB,UAAWuB,QAAQ,YAAYb,MAAM,aAAzE,oBA3IK8B,aAuJJC,EAzJH,kBAAMzB,EAAAC,EAAAC,cAACwB,EAAD,OCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92ee6a02.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Button from '@material-ui/core/Button'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nconst App = () => <Roll />;\r\n\r\nclass Roll extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  \r\n    this.state = {\r\n      total: 0,\r\n      roll: '-',\r\n      isDisabled: false,\r\n      totalStyle: 'ok',\r\n      result: '',\r\n      game: '',\r\n      animate: 'dice'\r\n    };\r\n    this.onRoll=this.onRoll.bind(this)\r\n   }\r\n  \r\n  detectResult = () => {\r\n    if (this.state.total > 15 && this.state.total < 20) {\r\n      this.setState((state) => ({\r\n          totalStyle: 'danger'\r\n      }))\r\n    } else if (this.state.total > 20) {\r\n      this.setState((state) => ({\r\n        isDisabled: true,\r\n        totalStyle: 'bust',\r\n        result: 'lose',\r\n        game: 'over'\r\n    }))\r\n    } else if (this.state.total === 20) {\r\n      this.setState((state) => ({\r\n        isDisabled: true,\r\n        totalStyle: 'win',\r\n        result: 'win',\r\n        game: 'over'\r\n    }))\r\n    }\r\n    \r\n  }\r\n   \r\n  onRoll = () => {\r\n    this.setState((state) => ({\r\n      animate: 'diceshaking',\r\n      isDisabled: true\r\n    }))\r\n    var delay = Math.floor(Math.random() * 500) + 1000\r\n    setTimeout(() => {\r\n      this.setState({ roll:  Math.floor(Math.random() * 6) + 1});\r\n      this.setState((state) => ({\r\n        animate: 'dice',\r\n        isDisabled: false,\r\n        total: state.total + state.roll\r\n    }),() => {this.detectResult()}\r\n    )}\r\n    ,delay)\r\n    \r\n  };\r\n  \r\n  resetGame = () => {\r\n    this.setState((state) => ({\r\n      total: 0,\r\n      roll: '-',\r\n      isDisabled: false,\r\n      totalStyle: 'ok',\r\n      result: '',\r\n      game: '',\r\n      animate: 'dice'\r\n    }))\r\n  }\r\n\r\n  styles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing.unit * 2,\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  });\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\" color=\"secondary\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n              Roll Or Die\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Paper style={{ textAlign: \"center\" }}>\r\n              <p>Roll or Die is a simple dice game. Simply roll until you get exactly 20 to win.</p>\r\n              <img src={process.env.PUBLIC_URL + '/images/' +  this.state.roll + '.png'} alt='dice' className={this.state.animate}></img>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Paper className=\"rounded\">\r\n              <Button type=\"button\" onClick={this.onRoll} disabled={this.state.isDisabled} variant=\"contained\" color=\"primary\">\r\n                Roll\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Paper>\r\n              <p className={this.state.totalStyle}>Total: {this.state.total}</p>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        { this.state.game === 'over' &&\r\n        <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Paper className=\"rounded\" style={{textAlign: 'center'}}>\r\n            <h2><p>You {this.state.result}!</p></h2>\r\n              <Button type=\"button\" onClick={this.resetGame} variant=\"contained\" color=\"secondary\">\r\n                Reset\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        }\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}